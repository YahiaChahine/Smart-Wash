@* @page "/" *@
@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SmartWash.WebUI.Account

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">
    <MudCard Style="width: 50%; max-width: 1000px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Class="my-4">Login</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@Input" OnValidSubmit="OnSubmit">
                <MudTextField Label="Email" @bind-Value="@Input.Email" Required="true" />
                <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="@Input.Password" Required="true" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-4" OnClick="@LoginUser">Login</MudButton>
                @if (errorMessage != null)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">@errorMessage</MudAlert>
                }
                
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // if (HttpMethods.IsGet(HttpContext.Request.Method))
        // {
        //     // Clear the existing external cookie to ensure a clean login process
        //     await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        // }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

