@* @page "/" *@
@page "/login"
@using SmartWash.Domain
@using SmartWash.Domain.Entities
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">
    <MudCard Style="width: 50%; max-width: 1000px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Class="my-4">Login</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@Input" OnValidSubmit="OnSubmit">
                <MudTextField Label="Email" @bind-Value="@Input.Email" Required="true" />
                <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="@Input.Password" Required="true" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-4" OnClick="@OnSubmit">Login</MudButton>
                @if (ShowError)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">Invalid login attempt.</MudAlert>
                }
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private InputModel Input = new InputModel();
    private bool ShowError = false;

    public class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }

    private async Task OnSubmit()
    {
        try
        {

            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, false, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                ShowError = false;
                NavigationManager.NavigateTo("/");
            }
        } catch (Exception e)
        {
            ShowError = true;
            
        }
    
        
        

    }
}

