@page "/Account/AdminReply/{FeedbackID}"
@using SmartWash.WebUI.Shared
@using SmartWash.Application.FeedbackSystem
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IFeedbackService FeedbackService
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService

<PageTitle>Reply</PageTitle>

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">

    <AuthorizeView Roles="Admin">

        <div class="row">
            <div class="fullscreen-section text-font">
                <h1>Submit Reply</h1>
                <section style="width: 100%;">
                    <EditForm Context="diff" Model="Input" method="post" OnValidSubmit="SubmitFeedback" FormName="feedback">
                        <DataAnnotationsValidator />
                        <hr />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3">
                            <InputTextArea type="content" @bind-Value="Input.Content" class="form-control" autocomplete="content" aria-required="true" placeholder="content" />
                            <label for="content" class="form-label">Content</label>
                            <ValidationMessage For="() => Input.Content" class="text-danger" />
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary" style="background-color: rgba(102, 133, 160, 1); border: none;">Submit</button>
                        </div>
                    </EditForm>
                </section>
            </div>
        </div>
    </AuthorizeView>

</MudContainer>


@code
{
    [Parameter]
    public string FeedbackID { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private ApplicationUser _user { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var userName = authState.User?.Identity?.Name;

        if (authState.User.Identity == null)
        {
            NavigationManager.NavigateTo("/");
        }

        _user = await UserManager.FindByNameAsync(userName);
    }

    private async Task SubmitFeedback()
    {
        var replyObject = new Reply
            {
                FeedbackId = int.Parse(FeedbackID),
                Content = Input.Content,
                UserId = _user.Id,
                ReplyDateTime = DateTime.Now,
            };

        await FeedbackService.ReplyToFeedback(replyObject);

        NavigationManager.NavigateTo("/Account/AdminFeedbackList");
    }


    private sealed class InputModel
    {
        [Required]
        public string Content { get; set; } = "";

    }
}
