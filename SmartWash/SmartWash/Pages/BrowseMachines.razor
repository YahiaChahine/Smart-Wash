@* @page "/" *@
@page "/browse"
@page "/browse/{Type}"
@inject NavigationManager NavigationManager
@inject IMachineService MachineService
@using SmartWash.Domain
@using SmartWash.Application.MachineSystem

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False" Style="margin-top: -2rem;">
    <MudStack Row="true" Style="width: 100%;" AlignItems="AlignItems.Center" Justify="Justify.SpaceAround">
        <MudContainer Class="center gap-5">
            <MudText Typo="Typo.h4" Align="Align.Left" Style="width:100%;">Choose a date and time</MudText>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="5">
                <div style="width: fit-content;">
                    <MudDatePicker Date="@SelectedDate" DateChanged="async (d) => OnDateChoose(d)" Label="Date" PickerVariant="PickerVariant.Static" Orientation="Orientation.Landscape"/>
                </div>
                <MudButtonGroup Variant="Variant.Filled" DisableElevation="true" VerticalAlign="true" OverrideStyles="false">
                    @for (var time = Constants.OpeningTime; time < Constants.ClosingTime; time = time.Add(Constants.SlotDuration))
                    {
                        var t = time;
                        <MudButton Variant="Variant.Filled" Class="py-2" Color="time == SelectedTime ? Color.Primary : Color.Default"
                                   @onclick="async () => await OnTimeChoose(t)">@((new DateTime() + t).ToString("hh:mm tt"))</MudButton>
                    }
                </MudButtonGroup>
            </MudStack>
        </MudContainer>

        <MudPaper Width="50%" Height="60vh" MaxWidth="500px" Class="scroll-container">
            @if(AvailableMachines == null)
            {
                <MudProgressCircular Size="Size.Large" Color="Color.Primary"/>
            }
            else if(!AvailableMachines.Any())
            {
                <MudText Typo="Typo.h5" Align="Align.Center">No machines available</MudText>
            }
            else
            {
                @foreach (var machine in AvailableMachines)
                {
                    <MudCard Class="machine-card cursor-pointer" @onclick="@(() => OnMachineClick(machine))" Outlined="true" Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">Machine @machine.ID</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIcon Icon="@(machine.Type == MachineType.WashingMachine ? Icons.Material.Filled.LocalLaundryService : Icons.Material.Filled.DryCleaning)" Size="Size.Large" Color="Color.Primary"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">Type: @machine.Type</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            }

        </MudPaper>
    </MudStack>
</MudContainer>

@*// TODO: Ask for cycle number here so that the user can book the machine for a certain number of cycles*@

@code
{
    [Parameter]
    public string Type { get; set; } // TODO: Make it so that the user can choose between washing and drying machines

    private DateTime? SelectedDate { get; set; } = DateTime.Today;
    private TimeSpan? SelectedTime { get; set; } = Constants.OpeningTime;
    private int Cycles { get; set; } = 1;

    private IEnumerable<Machine>? AvailableMachines { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateMachines();
    }

    private async Task OnTimeChoose(TimeSpan time)
    {
        SelectedTime = time;

        await UpdateMachines();
    }

    private async Task OnDateChoose(DateTime? date)
    {
        SelectedDate = date;

        await UpdateMachines();
    }

    private void OnMachineClick(Machine machine)
    {
        NavigationManager.NavigateTo($"/machine/{machine.ID}");
    }

    private async Task UpdateMachines()
    {
        var datetime = SelectedDate.Value.Add(SelectedTime.Value);
        AvailableMachines = await MachineService.GetAvailableMachinesAsync(datetime, datetime.Add(Constants.SlotDuration * Cycles));

        StateHasChanged();
    }

}
