@page "/signup"
@using SmartWash.Domain
@using SmartWash.Domain.Entities
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject SignInManager<ApplicationUser> SignInManager

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">
    <MudCard Style="width: 50%; max-width: 1000px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Class="my-4">Register</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="input" OnValidSubmit="OnSubmit">
                <MudTextField Label="Full Name" @bind-Value="@input.Fullname" Required="true" />
                <MudTextField Label="Email" @bind-Value="@input.Email" Required="true" />
                <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="@input.Password" Required="true" />
                <MudTextField Label="Confirm Password" InputType="InputType.Password" @bind-Value="@input.ConfirmPassword" Required="true" />
                <MudTextField Label="Phone Number" @bind-Value="@input.PhoneNumber" Required="true" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-4" OnClick="@OnSubmit">Register</MudButton>
                @if (ShowError)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">@ErrorMessage</MudAlert>
                }
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private InputModel input = new InputModel();
    private bool ShowError = false;
    private string ErrorMessage = "";

    public class InputModel
    {
        [Required(ErrorMessage = "Full Name is required")]
        public string Fullname { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Phone Number is required")]
        [Phone(ErrorMessage = "Invalid phone number")]
        public string PhoneNumber { get; set; }
    }

    private async Task OnSubmit()
    {
        try
        {
            var identity = new ApplicationUser
                {
                    UserName = input.Fullname,
                    Email = input.Email,
                    FullName = input.Fullname,
                    PhoneNumber = input.PhoneNumber,
                    PointNum = 0,
                    RegistrationDate = DateTime.Now,
                    IsGuest = false
                };
            var result = await UserManager.CreateAsync(identity, input.Password);

            if (result.Succeeded)
            {
                ShowError = false;
                var role = new IdentityRole("Member");
                var addRoleResults = await RoleManager.CreateAsync(role);
                var addUserRoleResult = await UserManager.AddToRoleAsync(identity, "Member");
                await SignInManager.SignInAsync(identity, isPersistent: false);

                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = result.Errors.FirstOrDefault().Description;
                ShowError = true;
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            ShowError = true;
        }
    }
}
