@page "/signup"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SmartWash.WebUI.Account

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Signup> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">
    <MudCard Style="width: 50%; max-width: 1000px;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Class="my-4">Register</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="Input">
                <MudTextField Label="Email" @bind-Value="@Input.Email" Required="true" />
                <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="@Input.Password" Required="true" />
                <MudTextField Label="Confirm Password" InputType="InputType.Password" @bind-Value="@Input.ConfirmPassword" Required="true" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-4" OnClick="RegisterUser">Register</MudButton>
                @if (ShowError)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">@ErrorMessage</MudAlert>
                }
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool ShowError = false;
    private string ErrorMessage = "";

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";


    public async Task RegisterUser()
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);


        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}
