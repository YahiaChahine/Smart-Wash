@page "/Account/FeedbackList"
@using SmartWash.WebUI.Shared
@using SmartWash.Application.FeedbackSystem
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using SmartWash.Domain.Interfaces

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IFeedbackService FeedbackService
@inject IFeedbackRepository FeedbackRepository
@inject IReplyRepository ReplyRepository
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService

<PageTitle>Feedback List</PageTitle>

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">

    <AuthorizeView Roles="Member">
        <div class="fullscreen-section text-font">
            <h1>Feedbacks</h1>
            <section style="width: 70%; height: 60%; overflow: auto;">

                @if (feedbackList is null)
                {
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" Style="display: block; margin: auto;" />
                }
                else if (!feedbackList.Any())
                {
                    <MudText Typo="Typo.h5" Align="Align.Center">No feedbacks found</MudText>
                }
                else
                {
                    <MudStack Spacing="5">
                        @foreach (var feedback in feedbackList)
                        {
                            <MudCard>
                                <MudCardHeader>
                                    <MudText Typo="Typo.h4">Feedback #@feedback.ID</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText Typo="Typo.body1">@feedback.Title</MudText>
                                    <MudText Typo="Typo.body1">Date: @feedback.FeedbackDateTime.ToString("dd/MM/yyyy")</MudText>
                                    <MudText Typo="Typo.body1" Class="pt-4">@feedback.Content</MudText>

                                </MudCardContent>
                            </MudCard>

                            var replies = allReplies.Where(r => r.FeedbackId == feedback.ID).ToList();

                            <MudPaper Width="100%" Square="true">
                                <MudList Clickable="false">
                                    @foreach (var reply in replies)
                                    {
                                        <MudText Typo="Typo.h5" Class="m-3">Reply</MudText>
                                        <MudListItem>@reply.Content</MudListItem>
                                    }
                                </MudList>
                            </MudPaper>
                        }
                    </MudStack>
                }
            </section>
        </div>
    </AuthorizeView>

</MudContainer>


@code
{
    private List<Feedback>? feedbackList { get; set; }

    private ApplicationUser _user { get; set; } = new();

    private List<Reply> allReplies { get; set; } = new List<Reply>();

    protected override async Task OnInitializedAsync()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var userName = authState.User?.Identity?.Name;

        if (authState.User.Identity == null)
        {
            NavigationManager.NavigateTo("/");
        }

        _user = await UserManager.FindByNameAsync(userName);


        var feedbacks = await FeedbackRepository.GetByUserAsync(_user.Id);
        feedbackList = feedbacks.ToList();

        var replies = await ReplyRepository.GetAllAsync();
        allReplies = replies.ToList();

    }


}
