@page "/Account/FeedbackList"
@using SmartWash.WebUI.Shared
@using SmartWash.Application.FeedbackSystem
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using SmartWash.Domain.Interfaces

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IFeedbackService FeedbackService
@inject IFeedbackRepository FeedbackRepository
@inject IReplyRepository ReplyRepository
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService

<PageTitle>Feedback List</PageTitle>

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">

    <AuthorizeView Roles="Member">


                <h1>Your Feedback List</h1>
                @foreach (var feedback in feedbackList)
                {
                    <MudText Align="Align.Center" Typo="Typo.h5">@feedback.Title</MudText>
                    <MudText Align="Align.Center" Typo="Typo.body1">@feedback.Content</MudText>
                    var replies = allReplies.Where(r => r.FeedbackId == feedback.ID).ToList();
                    
                    <br>
                     <MudPaper Width="100%" Square="true">
                            <MudList Clickable="false">
                    @foreach(var reply in replies)
                    {
                        <p>Reply from @reply.User.UserName</p>       
                        <MudListItem>@reply.Content</MudListItem>
                        <MudDivider />
                        
                    }
                            </MudList>
                        </MudPaper>
                }
    </AuthorizeView>

</MudContainer>


@code
{
    private List<Feedback> feedbackList { get; set; } = new List<Feedback>();

    private ApplicationUser _user { get; set; } = new();

    private List<Reply> allReplies { get; set; } = new List<Reply>();

    protected override async Task OnInitializedAsync()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var userName = authState.User?.Identity?.Name;

        if (authState.User.Identity == null)
        {
            NavigationManager.NavigateTo("/");
        }

        _user = await UserManager.FindByNameAsync(userName);


        var feedbacks = await FeedbackRepository.GetByUserAsync(_user.Id);
        feedbackList = feedbacks.ToList();

        var replies = await ReplyRepository.GetAllAsync();
        allReplies = replies.ToList();

    }


}
