@page "/Account/Member/Notifications"
@using SmartWash.WebUI.Shared
@using SmartWash.Application.FeedbackSystem
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using SmartWash.Domain.Interfaces

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IFeedbackService FeedbackService
@inject IFeedbackRepository FeedbackRepository
@inject IReplyRepository ReplyRepository
@inject INotificationRepository NotificationRepository
@inject UserManager<ApplicationUser> UserManager
@inject IDialogService DialogService

<PageTitle>Notifications</PageTitle>

<MudContainer Class="fullscreen-section colored" MaxWidth="MaxWidth.False">

    <AuthorizeView Roles="Member">


        <h1>Notifications</h1>
        @if (canShow)
        {
            @foreach (var notification in notifications.Reverse())
            {
                <MudText Align="Align.Center" Typo="Typo.h5">@notification.Content</MudText>
            }

        } else
        {
            
            <MudText Align="Align.Center" Typo="Typo.h5">No Notifications</MudText>
        }
    </AuthorizeView>

</MudContainer>


@code
{

    private ApplicationUser _user { get; set; } = new();
    private IEnumerable<Notification> notifications;
    private bool canShow = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var userName = authState.User?.Identity?.Name;
        canShow = false;
        if (authState.User.Identity == null)
        {
            NavigationManager.NavigateTo("/");
        }

        _user = await UserManager.FindByNameAsync(userName);

        notifications = await NotificationRepository.GetByUserAsync(_user.Id);
        if (notifications != null)
        {
            canShow = true;
        }
    }


}
