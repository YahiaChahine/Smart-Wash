@using SmartWash.Domain.Interfaces
@using System.ComponentModel.DataAnnotations

@inject ICreditCardRepository CreditCardRepository

<MudDialog>
    <DialogContent>
        <EditForm Model="Input" OnValidSubmit="AddPaymentMethod" id="payment-form">
            <DataAnnotationsValidator />

            <MudGrid Class="mb-8">
                <MudItem xs="12">
                    <MudTextField Label="Card Holder" @bind-Value="Input.CardHolderName" Variant="@Variant.Text"/>
                    <ValidationMessage For="() => Input.CardHolderName" class="text-danger" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Mask="@(new PatternMask("0000 0000 0000 0000"))" Label="Credit Card Number"
                                  @bind-Value="Input.CreditCardNumber" Variant="@Variant.Text" Clearable/>

                    <ValidationMessage For="() => Input.CreditCardNumber" class="text-danger" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Mask="@(new DateMask("MM/YY", 'Y', 'M'))" Label="Expires"
                                  @bind-Value="Input.ExpiryDate" Variant="@Variant.Text"/>
                    
                    <ValidationMessage For="() => Input.ExpiryDate" class="text-danger" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Mask="@(new PatternMask("000"))" Label="CVC"
                                  @bind-Value="Input.CVV" Variant="@Variant.Text"/>
                    
                    <ValidationMessage For="() => Input.CVV" class="text-danger" />
                </MudItem>
            </MudGrid>
        </EditForm>

    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Justify="Justify.SpaceBetween" Class="fullwidth mx-6">
            <MudButton Color="Color.Primary" OnClick="Close" Size="Size.Large">Cancel</MudButton>
             <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" form="payment-form"
                       Size="Size.Large" Class="px-10">   
                @if (_processing)
               {
                   <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                   <MudText Class="ms-2">Processing</MudText>
               }
               else
               {
                   <MudText>Add</MudText>
               }
                </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

 @code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    
    [Parameter] public ApplicationUser? User { get; set; }

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private CreditCard CreditCard { get; set; } = new();
    private bool _processing;

    private async Task AddPaymentMethod()
    {
        CreditCard.CardHolderName = Input.CardHolderName;
        CreditCard.CardNumber = Input.CreditCardNumber;

        CreditCard.ExpirationMonth = int.Parse(Input.ExpiryDate.Substring(0, 2));
        CreditCard.ExpirationYear = int.Parse(Input.ExpiryDate.Substring(3, 2));

        CreditCard.CVV = Input.CVV;

        if (User is not null)
        {
            CreditCard.UserId = User.Id;

            _processing = true;
            await CreditCardRepository.AddAsync(CreditCard);  
            _processing = false;
        }

        MudDialog.Close(DialogResult.Ok(CreditCard));
    }

    void Close() => MudDialog.Close(DialogResult.Cancel());

    private sealed class InputModel
    {
        [Required]
        public string CardHolderName { get; set; } = string.Empty;

        [Required]
        [CreditCard]
        [DataType(DataType.CreditCard)]
        public string CreditCardNumber { get; set; } = string.Empty;

        [Required]
        public string ExpiryDate { get; set; } = string.Empty;

        [Required]
        public string CVV { get; set; } = string.Empty;
    }
}